1.七层协议
- 物理层 定义物理设备标准,网线的接口类型,传输比特流
- 链路层 将物理层接收的数据进行MAC地址封装解封装,封装后的数据叫帧
- 网络层 ip地址层面的封装解封装,这一层数据叫数据包
- 传输层 传输层已经可以确定主机了,定义了数据的传输协议和端口号，数据交换基本单位叫数据段
- 会话层 会话层建立了数据传输的通路
- 表示层 对接收的数据进行解释, 加解密, 压缩解压缩
- 应用层 

2.四层模型
应用层 TCP/IP协议族内预存了各类通用的应用服务。
链路层 为上层协议提供端到端的可靠和透明的数据传输服务，包括处理差错控制和流量控制等问题。
网络层 通过ip建立两个节点之间的连接，即主机节点层面路由。
数据链路层 物理连接网络的硬件部分设备标准，包括操作系统、设备驱动、网卡等

3.机器TCP/IP协议族分层与目的机器通信,发送的数据会在发送端按高层到底逐层对数据解封装成为比特流,在接收端逐层向上封装成为应用层数据结构
- 在传输层分割HTTP报文后为报文打序号,并添加端口等TCP头部发送给网络层
- 在网络层根据ip寻径找到目的主机，为数据增加MAC目的地址后发给链路层

4. TCP可靠服务：不丢失、不重复、按序到达

5. 面向连接：在网络层传输时会有明确的路由

6. 报文结构
5*32 = 20 byte固定首部结构
- 两个port 占4字节
- seq      占4字节
- ackSeq      占4个字节
- 6个标志位    占6个字位
- 校验和    占2个字节

ACK标志 确认序号有效
FIN标志 释放一个连接
RST标志 重连
SYN标志 发起一个新的连接

7. 差错控制
三次握手：确认双方收发数据的能力，为什么需要三次？前两次可以将发送端的SYN设置为1，后两次将ACK设置为1, 原因一--这样可以避免客户端连接请求阻塞延时重传到达时间过晚,连接已经关闭,再次重连出现连接浪费的问题,
原因二--避免第二次握手时服务端丢包,这样在客户端开始重传连接请求之前,服务端发来的数据将被拒绝
四次挥手：
第二次第三次挥手是让客户端保持第二段终止等待状态, 第四次挥手是确认第二段等待终止
额外两段报文生存时间的作用: 防止最后一次挥手的ack丢失, 同时让此次连接会话中阻塞超时的报文全部超时

8.保活计时器
TCP协议防止客户端故障让服务器等待的问题, 客户端沉默时间过长就让服务器试探,连续10个保活探文没有相应就关闭会话连接

9.可靠性保证
超时重传、应答机制
数据包校验: 在tcp头部加入校验和2 byte
丢弃重复
数据包重排序

10.分布式拒绝服务ddos
syn洪流，僵尸机不做ack，服务器一直等待ack
ack洪流，僵尸机随便发ack服务器要去找匹配的SYN

11.TCP、UDP比较
后者无连接通信，后者面向报文一次发完且头结构只有8字节传输效率高，后者可以实现一对多、多对多传输
文件传输一般采用TCP, 即时通信一般采用UDP
DHCP、DNS 协议是建立在UDP之上的

12.流量控制
TCP协议使用滑动窗口规定接收数据的缓冲大小，TCP应答消息中包括了接收窗口的大小
流量控制导致的死锁：当滑动窗口大小为0时表示拒绝接收数据，当窗口修改不为0的通知数据丢失时服务器一直等待数据的状态
如何避免死锁，让客户端在接收窗口锁零之后轮询服务器什么时候允许接收数据

13.拥塞控制算法
拥塞控制是为了避免网络负载过大
算法内容：慢开始->拥塞避免->快恢复

14.TCP中的粘包、拆包问题，
粘包：数据包大小小于窗口大小时多个包一起发送
拆包：数据包大小大于窗口大小时一个包得分多次发送，就需要将数据包拆分为多个
UDP不会发生拆包、粘包问题，因为UDP数据报文有明确的消息边界，而TCP数据包本质上是字节流

15.粘包、拆包的解决方案
- 自定义协议
- 在消息头部指定消息体的长度范围
- 客户端在包的末尾使用固定的分隔符
- 规定包长度，未满足长度使用空格补充

16.高并发场景下优化TCP的方式
- 关闭粘包算法
- 避免频繁创建和回收连接资源
- 加大Linux服务器文件描述符的最大数量

17.HTTP无状态协议
协议本身无法对请求和响应的通信状态进行保存

18.HTTP请求报文结构
- 请求行 	GET /admin/index HTTP/.1 请求方式 请求URL 协议版本号
- 请求头 	一些键值对,如cookie,host,accept
- 空白行		标志请求头内容已结束
- 请求体		(请求数据)即requestbody或requestparam

19.HTTP响应报文结构
- 响应状态码、协议版本号
- 响应头 如过期时间,编码格式
- 响应体

20.http请求过程
建立TCP连接 -> 发送请求行 -> 发送请求头 -> 发送响应状态码,版本号 -> 发送响应头 -> 发送响应内容 -> 关闭TCP连接

21.HTTP状态码
HTTP状态码表示客户端HTTP请求的返回结果
3xx 重定向, 需要附加操作完成请求
2xx 成功
1xx 正在处理请求
---------------
301 永久性重定向,会缓存新地址,下次访问时直接请求到新地址去
302 临时性重定向,每次仍要走跳转
400 请求格式错误
401 未认证
403 服务器拒绝
404 资源不存在
500 执行内部出错
503 服务器停机维护

22.长连接、短连接
1.1版本后的HTTP默认使用长连接，即保持TCP连接状态不关闭，但是WEB项目适合使用短连接，因为保持连接状态对服务端资源消耗大

23.GET和POST的区别
- GET的参数在URL中受到URL长度限制, 被浏览器缓存, 参数数据不安全
- GET只产生一个TCP数据包, HEAD和data一起发出, POST则产生2个TCP数据包, 发生HEAD之后受到100 CONTINUE状态码再发送data, 服务器响应200 OK

24.token和session认证方式比较
token可以避免跨站请求伪造
session造成较大的服务器负担
token对移动端友好
token对单点登录的实现友好
token方便实现前后端分离项目

25.HTTPS相对HTTP的区别: 数据内容加密+数字证书认证身份+报文完整性保证(校验算法)
数据内容加密的实现靠SSL，即安全套接层来实现
完整性可以通过一些校验和算法来实现

26.数字证书
dc制作步骤:ca的签名算法本质上是哈希先哈希再加密
服务端把证书发送给浏览器->公钥解密->将内容哈希后和解密结果比较,一致则说明可信

27.ARP,RARP
ARP地址解析协议,负责将IP地址映射成为MAC地址
RARP协议作用恰恰相反

28.IP地址划分
网络号+主机号构成
网络分配机构对ipv4网络进行了大致分配,网络号长度越短的可分配的主机越多,A类网网络号一个字节,B类两个字节,C类网络3个字节