1.对象头的Markword标记字用于存放hashCode和锁信息，且有一个指向方法区中类信息的指针

2.重量级锁和其实现
同步代码块的监视器是重量级锁，依赖操作系统底层锁实现，Java线程映射到os原生线程上，切换的成本较高。每个对象有一个monitor与之对应，由ObjectMonitor实现
monitor由ObjectMonitor实现（C++），重量级锁机制划分了三个区域：Entry set、the owner和wait set，
	等待锁的线程封装为ObjectWaitor，在entry set中等待
	线程获取到锁之后The Owner将monitor的owner修改为该线程，同时monitor的count加一
	如果线程调用wait方法，owner变为null，count自减一，线程进入wait set等待唤醒
	线程执行完毕释放锁，则同样释放锁，count--

3.自旋锁
重量级锁的等待区wait set在多数情形下是不必要的，实际上线程多数拿到锁执行的时间非常短。针对此问题，自旋锁方案诞生了，jdk6之后默认开启自旋锁。
自旋锁不再有等待区域，也不会把线程挂起，而是通过无限循环的形式去检测是否能获取到锁，很快地线程很容易就能拿到锁，线程循环检测的时间成本相比挂起唤醒的成本低。
自选次数默认为10次，如果仍然失败则退化为重量级锁。自旋锁退化机制后来优化为自适应判断退化时机，刚拿到过锁循环等待的次数可以多一些，经常拿不到锁的线程则更容易退化成为重量级锁。
因此现在的重量级锁的方案一般是重量级锁+自旋锁

4.轻量级锁
轻量级锁同样是为减轻获取锁释放锁的性能消耗产生的，
机制是在执行同步代码块的内容之前先检查标记字Mark Word，查看所对象是否被其他对象占用，如果没有线程占用则在当前线程所属栈帧建立一个名为锁记录的空间，用于复制存储对象目前的MarkWord（Displaced MarkWord）
接着JVM使用CAS操作将对象的MarkWord更新为轻量级锁状态(数据结构指向Lock Record的指针.指向的是当前栈帧),同时CAS检测Markword是否与栈帧中的一致
如果CAS失败,说明可能有线程进入同步代码块,此时JVM检查对象的MarkWord是否指向当前线程的栈帧,如果是,说明不存在竞争,否则锁已被其他对象占用,此时将锁膨胀为重量级锁.
锁的膨胀是不可逆的.轻量级解锁的过程是同样的CAS操作

5.cas操作是cpu指令完成的,效率极高

6.偏向锁
添加-XX:+UseBiased启动参数启用此锁
cas的对象是线程id，开销更小。此锁为单线程设计,当一个线程第一次获得锁之后没有其他线程申请此锁,可以考虑设置偏向锁,避免同步操作(忽略synchronized关键字)
偏向锁通过CAS检测markword中的线程id是否为当前线程的,如果出现竞争则进行膨胀
膨胀的结果需要根据对象是否计算过哈希值作为区别依据,这是由markword的数据结构冲突决定的,当计算过哈希值时直接膨胀为重量级锁,否则膨胀为轻量级锁
偏向锁的标记字数据结构会和哈希值冲突，冲突的结果就是计算哈希的对象不能偏向，锁定后计算哈希会膨胀为重量级锁，未锁定计算哈希会膨胀为轻量级锁

7.锁消除和锁粗化
运行时一直不需要同步,此时完全不需要加锁机制,锁会被消除
代码频繁出现互斥同步操作,例如循环内部加锁且频繁竞争,这样会非常消耗性能，这种情形JVM会自动识别将加锁范围自动调整到循环外

8.Java内存模型JMM，在JVM模型上的抽象模型
工作内存-主内存模型，每个线程有其工作内存，而所有的变量实际存储在主内存，线程使用变量时实际上是从主内存中Copy一份（Load），对副本进行操作，操作完毕后将结果拷贝回主内存中（Save）
抽象内存模型和实际内存模型的对应关系：主内存实际对应的堆中的实例，而工作内存对应是虚拟机栈，实际上JVM会对工作缓存工具进行优化，将其放到高速缓存或CPU寄存器中
同步问题的本质，可以归结为工作内存和主内存load/save操作上不及时，最终缓存不一致

9.重排序
编译或执行时JVM可能会重排序，既有编译器层面的重排序，也有本地机器指令级别的重排序，最终字节码指令或机器指令顺序和编码意图不一致

10.并发编程三大特性
原子性,可见性,有序性

11.volatile关键字
valotile关键字  修饰的变量修改过后会强制刷新到主内存中,并且这个写操作会导致其他工作内存中的该变量无效,这样就保证了可见性
volatile关键字仍然不能保证原子性,原因是并发同步的关键是线程执行也就是cpu指令执行层面的同步,仅仅是工作内存层面的可见性不足以保证原子性,操作数栈层面可以确保同步,cpu寄存器就不能了
禁止重排序,volatile关键字修饰的变量写操作不会出现重排序,原理是在volatile关键字写的cpu指令前后中插入"内存屏障"

12.happens-before先行发生原则
JMM提出的此原则,在这些原则下JVM是禁止编译优化的,开发者了解这些原则可以针对性地进行编码,可以避免并发问题

13.中断通信
https://www.bilibili.com/video/BV1CM4y157vc/?spm_id_from=333.337.search-card.all.click&vd_source=35a7308242fc0f2f7ea2ca32ed8b4bec
interrupt	线程的方法，中断线程的阻塞状态
interrupted 	返回线程是否被中断
interrupted	判断当前线程是否被中断，并清除中断标记

14.Lock接口和Condition接口
Lock接口 lock,unlock
Condition接口	lock.newCondition获得，可以创建多个Condition灵活使用，主要方法是await和signal

15.可重入锁ReentrantLock
可以连续反复进行加锁解锁操作就是可重入锁，支持方法getHoldCount和isLocked来获取加锁次数和是否锁定状态，getQueueLength()可以获取线程等待队列的数量预估值,hasQueuedThread(Thread t)可以查看线程是否在等待队列中,Condition的await等待队列长度可以通过lock.getWaitQueueLength(Condition condition)查看

16.公平锁
线程获取锁的顺序和申请锁的顺序一致
ReentrantLock的默认实现是非公平锁，可以在构造器指定参数设定是否为公平锁

17.锁降级：在持有写锁的情形下申请读锁再释放写锁
lock.writeLock().lock();
lock.readLock().lock();
lock.writeLock().unlock();    

18.AQS源码解析，以独占公平锁为例
底层维护的结构是双向链表和状态标记
lock()->acquire()->tryacquire()|acquireQueued(addWaiter())
tryacquire,尝试加锁，失败说明已有其他线程持有锁
addWaiter()加入等待队列
acquireQueued()竞争唤醒线程
值得注意的是,所有的队列的节点、节点状态并发操作,都是依赖volatile变量+CAS自旋操作实现的

19.原子类
通过volatile关键字+Unsafe类的cas操作来保证并发安全

20.LongAdder,StringAdder
cas的粒度下降到具体的字节数组

21.ABA问题
某线程的修改出现反复设置回到一开始的值，让其他线程以为值未发生变化。
JUC提供了AtomicStampedReference类来支持加版本号的cas操作

22.TimeUnit，Lock对象的await的时间是TimeUnit对象，TimeUnit.toSeconds(long d)
TimeUnit支持wait和sleep操作，Time.SECONDs.sleep,Time.SECONDS.await(d)

23.并发容器
CopyOnWriteArray 只对写操作加锁，数据一致性是最终一致性，同步是延时的
ConcurrentHashMap jdk7之前是借鉴LongAdder类思路进行分段存储，jdk8之后只对table中的头结点/根结点进行加锁
https://cloud.tencent.com/developer/article/2283647

24.阻塞队列
JUC提供了一些阻塞队列，继承自BlockingQueue接口，基于ReentrantLock实现
offer在阻塞时只返回是否成功，put阻塞至能入队为止，take阻塞到能出队为止，poll出队阻塞至超时、中断，drainTo从BlockingQueue中获取所有可用的数据对象放到集合中
三种常见阻塞队列的实现：
ArrayBlockingQueue、LinkedBlockingQueue、SynchronizedQueue（无缓存）和LinkedTransferQueue、PriorityQueue

25.ArrayBlockQueue源码
维护了一个items数组，创建queue时初始化，同时初始化一个ReentrantLock和两个Condition：notFull和notEmpty，允许阻塞线程的put、take方法会决定是实际地去执行出队入队enqueue和dequeue，还是阻塞当前队列，这个阻塞时循环执行的避免中断；而实际的signal实在enqueue和dequeue操作之后分别去执行的。

26.SynchronousQueue源码

27.LinkedTransferQueue结合了LinkedTransferQueue的优点，一起构成无界阻塞队列且不用基于锁实现

28.PriorityQueue支持优先级出队，基于二叉树实现，只有下界
DelayQueue支持优先级，按时间延迟获取元素

29.操作系统实现互斥的方法有
硬件方式：关中断
信号量
管程

31.线程池获取线程的顺序
核心线程->等待队列->非核心线程，创建后的非核心线程不会直接空闲，而是等待使用

32.使用线程池的好处避免频繁的创建销毁操作

32.线程池核心参数
核心线程：固定存活的线程
corePoolSize 核心线程数量
maximunPoolSize 最大线程数量
keepAliveTime 线程最大空闲时间，即非核心线程空闲超过一段时间自动销毁
unit 线程空闲等待时间单位
workQueue 线程等待队列，指定某种阻塞队列
handler	拒绝策略，队列和线程池都满了，采取的拒绝策略，有抛出异常、调用者执行、随机替换队列中线程、丢弃该任务
threadFactory 自定义线程池中线程的创建过程，给线程指定名字、优先级等，默认是runnable

33.countdowmLatch 计数器锁
指定count的大小，某个线程中进行wait，多线程执行中进行countdown，wait在count减为零时中断，快速方便地实现线程通信
countdown是一等多

34.循环屏障cyclicBarrier
多线程执行start操作的等待触发，设置指定大小的cyclicBarrier，多线程执行barrier.await直至await的数量到达指定数量

35.somaphore 和os的信号量极其相似
实现多线程并发控制的一种形式，两个操作acquire，release

36.两个线程调用exchange方法时，无论调用时间先后，两个线程会互相等到线程到达exchange方法调用点互相等待数据

37.Fork/Join并行执行框架 

38.threadlocal
提供线程本地变量,即包装一般对象的变量,支持set和remove操作.
所谓线程本地就是指,别的线程(和创建变量的线程不同的变量)访问这个变量时,都是在操作该变量的副本

31.线程池execute方法和commit方法
- execute只能提交Runnable类型的任务，无返回值。submit既可以提交Runnable类型的任务，也可以提交Callable类型的任务，会有一个类型为Future的返回值，但当任务类型为Runnable时，返回值为null。
- execute在执行任务时，如果遇到异常会直接抛出，而submit不会直接抛出，只有在使用Future的get方法获取返回值时，才会抛出异常

