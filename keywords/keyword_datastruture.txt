1.排序算法的稳定性
插入：直接插排稳定，希尔不稳定。
交换：冒泡稳定，快排不稳定。
选择：选择，堆排不稳定。
归并排序稳定，
基数排序，桶排序，计数排序稳定。

2.八大排序的时间复杂度
n方：冒泡、选择、插排
n^1.3：希尔
nlogn：归并、快排、堆排
n+k：基数排序、计数排序、桶排序
最坏时间复杂度能保持在对数阶的算法时归并和堆排，其余都会退化为平方阶，非比较排序中桶排序会退化平方阶，基数排序和计数排序不会

3.手写插排
void insertSort(int[] arr){
    for(int i=0;i<arr.length;i++){
        int temp = arr[i], j=i;
        for(;j>0&&arr[j-1]>temp;j--){
            arr[j] = arr[j-1];
        }
        arr[j] = temp;
    }
}

4.手写冒泡
static void bubbleSort(int[] arr){
    boolean flag = true; //标记还需继续排序
    for(int i = 0; i < arr.length - 1 && flag; i++){
        flag = false;
        for(int j = arr.length -1; j > i; j--){
            if(arr[j] < arr[j-1]){
                SortUtil.swap(arr, j, j-1);
                flag = true;
            }
        }
    }
}

5.手写选择排序
static void selectSort(int[] arr){
    int min;
    for(int i = 0; i < arr.length-1; i++ ){
        min = i;
        for(int j = i+1; j < arr.length; j++){
            if (arr[min] > arr[j])
                min = j;
        }
        SortUtil.swap(arr, min, i);
    }
}

6.手写快排
static void quickSort(int[] arr, int l, int h){
    int povit = arr[l], i = l,j = h;
    while(i < j){
        while(i < j && arr[j] > povit){
            j--;
        }
        while(i < j && arr[i] < povit){
            i++;
        }
        if (i < j && arr[i] == arr[j]){
            i++;
        } else{
            SortUtil.swap(arr, i, j);
        }
    }
    if(i - 1 > l) {
        quickSort(arr, l, i-1);
    }
    if(j + 1 < h) {
        quickSort(arr, j+1, h);
    }
}
