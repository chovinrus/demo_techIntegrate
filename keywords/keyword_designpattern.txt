1 代码质量
代码质量评价标准：可维护性、可读性、灵活可扩展、可复用、易测试
灵活和可扩展：灵活是能扩展、可扩展是不影响原来的代码
提高代码质量的常见方法论：面向对象、设计原则、设计模式、编程规范


2.设计模式
经验性的主要的、反复使用的软件设计开发的知识
设计模式提高代码质量的主要方面是可复用、可扩展
设计模式的分类：创建型、结构型和行为型

3. UML图
统一建模语言是用于设计软件的可视化建模语言，特点是简单、统一、图形化
分类有类图、时序图、对象图、用例图、状态图等

4.类图
类图三层：名字、成员属性、成员方法
抽象类用斜体表示名字，接口使用<<interface>>在类名上方标注
类和方法的修饰符
+ public	- private	# protected	不带符号表示default
静态成员在下方加下划线即可表示静态
类图中类与类之间的关系:依赖、关联、聚合、组合、实现、泛化

5.类图中的关系
依赖		虚线箭头		通过方法形参、局部变量或静态成员直接临时性访问另一个类
关联		实线箭头		对象之间的引用关系，即作为成员。可分为单向、双向和自关联
聚合(关联)	空心菱形实线	表示弱包含关系，代码上和关联一样，用成员表示。生命周期没有依赖关系
组合（关联）	实心菱形实线	表示强关联关系，代码上用成员表示，生命周期存在依赖关系
实现		虚弦空心三角箭头	即实现
泛化		实线空心三角箭头	即继承


4.SOLID法则	单一职责，接口隔离，控制粒度；开闭原则，里氏替换，灵活扩展。依赖倒置避免，迪米特降
SRP单一职责原则	合理设计类的粒度，可维护性高，内部不会打架
		应用时根据场景具体情况来拆分，随着业务扩展慢慢拆类
		demo:vehicle.run、vehicle.airRun
ISP接口隔离原则	依赖应当建立在接口上，并控制接口最小，本质上是拆分接口，减少接口实现上的冗余
		具体来说就是方法实现要拆分放到不同的接口上去，例如用户权限
		demo: A 依赖 Intf0 的 123方法，B依赖Intf 的145方法，其实就是说要拆分Intf为包含1，23，45的三个Intf
		      注册登录的功能和删除用户的功能建立在不同的接口上
Loc迪米特法则	最小知识法则，通过中间类降低耦合，同样是控制接口的粒度，迪米特是要建立接口
		过度追求迪米特会产生过多的中间类，使得系统复杂臃肿，因此需要平衡使用的程度

DIP依赖倒置原则	高层模块不应该依赖底层模块，二者都应该依赖抽象；抽象不应该依赖细节，细节应该依赖抽象，避免传统开发自顶向下设计
		抽象具体来说有抽象类和接口（面向接口编程），细节依赖抽象是先写接口后写实现，抽象依赖细节是根据实现去改接口，这样代码就有较好的稳定性
		demo：Message、电脑元件run
LSP里氏替换原则	继承过程中功能逻辑应与父类的期望保持一致，约束继承过程对父类的侵入
		多做实现少做重写，实现时功能应与
		demo：长方形求周长，正方形继承并重写方法，里氏替换过程中有没有可能替换到其他子类上去?
OCP开闭原则	（可扩展，不修改原代码）对扩展开放、对修改关闭
		通常是多态实现的思路。例如某协议接口有实现类，需要修改实现时应当添加新的修改实现类而不应该直接删除原来的实现类
		demo:报文协议的修改->添加新版本

5.
单例模式		保证一个类只有一个实例，并为该实例提供一个全局访问节点
饿汉式VS懒汉式	饿汉式在类加载时能通过JVM保证线程安全，类加载时间会慢一点，懒汉式会出现线程安全问题
线程安全的懒汉式	直接获取该实例的方法上加synchronized锁,这里会有一个加锁时机的问题，创建完实例后该方法依然是有锁的，并发度太低了
双重校验懒汉式	锁的范围缩小，即先判断是否有实例来判断需要加锁
静态内部类实现的懒汉式	将初始化写在静态内部类中

6.双重校验中单例对象要用volatile关键字修饰，因为创建对象的过程可能出现重排序
可见性指当一个线程修改了共享变量的值，其它线程能够立即得知这个修改。

7.两种对单例模式的破坏
反射对单例的破坏：反射可以获取到实例化方法，显然是对单例设计不利的。解决方式是在构造器里直接加一个判断单例是否存在，已存在则
序列化对单例的破坏：反序列化的过程会判断是否有构造器，有的话会调用反射，直接创建一个对象
解决办法：在构造器添加判断单例是否存在的逻辑防止反射创建对象，在单例类中添加readResolve方法改变反序列化的策略

8.枚举实现单例模式
枚举天然满足构造器私有、按需加载、线程安全

9.工厂模式
将对象的创建和使用两个逻辑分开，使用者关注使用即可。不对客户端暴露创建逻辑，而是通过使用一个共同的接口来指向创建的对象

10. 简单工厂模式
初步解决了创建逻辑分离，对使用者屏蔽，实践了迪米特法则。但是扩展仍需修改工厂类

11.工厂方法模式
将工厂类也做抽象

12.抽象工厂模式
将具体产品按被依赖的具体工厂分组，按实现的抽象产品分为产品继承等级。
思路，将一类产品按共同特性分类

13.建造者模式、建造者模式实现不可变对象链式创建、lombok实现Builder

14.浅克隆、深克隆

15.代理模式：目标接口有两个实现，一个具体实现类和一个代理实现类，proxy拥有RealSubject，proxy实现方法时可以使用realsubject中的方法，
aop，openfeign的负载均衡，springsecurity的过滤器链,spring中的async注解都是通过动态代理来实现的

16.动态代理：在使用时动态生成代理类
	jdk8实现，Proxy静态方法getProxyInstance，重写InvocationHandler中的invoke方法
	原理：根据类名获取二进制流的方式是运行时计算生成，本质就是通过反射实现
	cglib实现，
	原理：使用ASM开源包直接操作字节码，修改字节码生成子类
	cglib实现时目标类可以不用实现接口

17.桥接模式：将抽象部分与它的实现部分分离，使它们都可以独立地变化。

18.装饰者模式：动态的给一个对象添加一些额外的职责. 就扩展功能而言,装饰器模式提供了一种比使用子类更加灵活的替代方案。使用父类方法是以调用成员方法的形式使用的，新方法是成员，父类单独作为成员。
demo：FilterInputStream(bufferedFileInputStream的父类)

19.适配器模式：通过多实现或继承+实现的方式将类的接口转换为客户期望的另一个接口，适配器可以让不兼容的两个类一起协同工作。

20.门面模式：关联的形式

21.组合模式：对象->可递归的树

22.享元模式：可以共享对象的实际内存

23.观察者模式：主体可以添加移除观察者，notify观察者

24.jdk Observable接口

25.模板模式
AQS源码的实现就是模板模式，有独占式、共享式等

26.钩子方法
在父类中写好的默认方法，一般是一些判断逻辑的实现，以及一些空实现方法。

27.策略模式

28.??享元模式减少策略模式中过多的策略类

29.职责链模式

30.状态模式：将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为

31.迭代器模式，即常见的迭代器，集合方法可以生成迭代器，迭代器本身关联有集合

32.访问者模式：操作和数据分离，这个数据一般是一类对象，可读性较差

33.备忘录模式:通过类实现undo操作

34.将调用者和被调用者的关系解耦，封装操作信息为“命令”类

35.解释器模式：几乎不考

36.中介者模式：迪米特法则的最佳实践，通过中介者沟通一组同类对象

八股重点

六大设计法则
单一职责、接口隔离、迪米特法则、依赖倒置、开闭原则、里氏替换

讲讲单例模式的理解
饿汉懒汉优缺点，两种同步解决方式，三种主要实现方式

讲讲对工厂模式的理解
场景：接收参数创建对象、三种工厂模式（迪米特->开闭法则->产品族的概念）

代理模式
适用场景：透明地使用被代理类，功能增强
动态代理的优势：编写代理类的逻辑是类似的
两种动态代理的区别x2：加载生成动态类的时机（二进制流动态用ASM包操作类对象）、cglib目标类可以不需要实现接口

代理模式和装饰器模式的区别：后者的装饰类引用的类型是上层接口，增强后类型没有变，因此说是增强，引用关系是聚合，实际上被增强对象是暴露的

门面模式：
为多个功能相近的类提供统一的入口
实现方式巨巨简单的那个就是，门面关联具体实现类（子系统）

组合模式：
叶子构建和容器构建被统一对待，实现方式就是让单节点和组节点实现相同的接口
GUI编程、面向组件编程

适配器模式：
适配的实现方式就是实现+继承或多实现，不同团队开发的功能要通用时，例如日志功能要支持不同的日志门面

迭代器模式
帮助避免遍历时暴露完整的对象，存储数据和遍历数据分离，迭代器类拥有目标容器和游标数字，操控游标数字就能遍历容器中的对象

命令模式：
目的是使得操作调用信息和实现信息解耦，命令是调用者发送给接收者的参数，接受者接收到参数之后执行动作，将这个参数封装成对象就是命令模式，一般会抽象出接口

观察者模式
对象状态互相影响的情形，抽象两者的依赖和具体两者的依赖相反，抽象是一对多有多个观察者，

策略模式
实现上和外观模式极其相似，但是门面（上下文）对策略实现类的关联是聚合关系，策略实现类要进行一下抽象提供不同的策略，可以把策略模式看做外观模式的延伸


